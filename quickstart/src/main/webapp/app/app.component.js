"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
//
// Source code generated by Celerio, a Jaxio product.
// Documentation: http://www.jaxio.com/documentation/celerio/
// Follow us on twitter: @jaxiosoft
// Need commercial support ? Contact us: info@jaxio.com
// Template pack-angular:src/main/webapp/app/app.component.ts.p.vm
//
var core_1 = require('@angular/core');
var http_1 = require('@angular/http');
var Observable_1 = require('rxjs/Observable');
var message_service_1 = require('./service/message.service');
/**
 * The Root component. Defines the main layout and handles user login in a dialog.
 */
var AppComponent = (function () {
    function AppComponent(http, messageService) {
        var _this = this;
        this.http = http;
        this.messageService = messageService;
        this.options = new http_1.RequestOptions({ headers: new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' }) });
        this.items = [{ label: 'hello' }];
        this.msgs = [];
        this.displayLoginDialog = false;
        this.loginFailed = false;
        this.authenticated = false;
        this.j_username = "admin";
        this.j_password = "admin";
        messageService.messageSource$.subscribe(function (msg) {
            _this.msgs.push(msg);
        });
    }
    AppComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.items = [
            { label: 'Home', routerLink: ['/'], icon: 'fa-home' },
            { label: 'Entities', icon: 'fa-search', items: [
                    { label: 'Author List', routerLink: ['/author-list'] },
                    { label: 'Book List', routerLink: ['/book-list'] },
                    { label: 'Project List', routerLink: ['/project-list'] },
                    { label: 'Role List', routerLink: ['/role-list'] },
                    { label: 'UseCase1 List', routerLink: ['/useCase1-list'] },
                    { label: 'UseCase2 List', routerLink: ['/useCase2-list'] },
                    { label: 'UseCase3 List', routerLink: ['/useCase3-list'] },
                    { label: 'User List', routerLink: ['/user-list'] }]
            },
            { label: 'Swagger', url: "/swagger-ui.html", icon: 'fa-gear' },
            { label: 'Documentation',
                icon: 'fa-book',
                items: [
                    { label: "Source code", icon: 'fa-github-alt', url: "https://github.com/jaxio/celerio-angular-quickstart" },
                    { label: "Celerio Documentation", icon: 'fa-external-link', url: "http://www.jaxio.com/documentation/celerio/" },
                    { label: "PrimeNG Showcase", icon: 'fa-external-link', url: "http://www.primefaces.org/primeng" },
                    { label: "Angular JS 2", icon: 'fa-external-link', url: "http://angular.io/" },
                    { label: "Spring Boot", icon: 'fa-external-link', url: "http://projects.spring.io/spring-boot/" },
                    { label: "Spring Data JPA", icon: 'fa-external-link', url: "http://projects.spring.io/spring-data-jpa/" },
                    { label: "TypeScript", icon: 'fa-external-link', url: "https://www.typescriptlang.org/" }
                ]
            }
        ];
        this.isAuthenticated().
            subscribe(function (resp) {
            _this.authenticated = resp;
            _this.displayLoginDialog = !_this.authenticated;
            if (_this.authenticated) {
                _this.items.push({ label: 'Sign out', url: '/api/logout', icon: 'fa-sign-out' });
                console.log('You are authenticated...', '');
            }
            else {
                console.log('You are NOT authenticated...', '');
            }
        }, function (error) { return _this.messageService.error('isAuthenticated Error', error); });
    };
    AppComponent.prototype.isAuthenticated = function () {
        return this.http.get('/api/authenticated').
            map(function (response) { return response.json(); }).
            catch(this.handleError);
    };
    AppComponent.prototype.login = function () {
        var _this = this;
        console.log("login for " + this.j_username);
        var body = 'j_username=' + this.j_username + '&j_password=' + this.j_password + '&submit=Login';
        this.http.post('/api/login', body, this.options).
            map(function (res) { return res.status == 200; }).catch(this.handleError).
            subscribe(function (loginOk) {
            if (loginOk) {
                _this.displayLoginDialog = false;
                _this.authenticated = true;
                _this.items.push({ label: 'Sign out', url: '/api/logout', icon: 'fa-sign-out' });
                _this.loginFailed = false;
                _this.messageService.info('You are now logged in.', '');
            }
            else {
                _this.loginFailed = true;
                _this.displayLoginDialog = true;
                _this.authenticated = false;
            }
        }, function (error) {
            _this.messageService.error('Login error', error);
            _this.loginFailed = true;
            _this.displayLoginDialog = true;
            _this.authenticated = false;
        });
    };
    // sample method from angular doc
    AppComponent.prototype.handleError = function (error) {
        var errMsg = (error.message) ? error.message :
            error.status ? "Status: " + error.status + " - Text: " + error.statusText : 'Server error';
        console.error(errMsg); // log to console instead
        return Observable_1.Observable.throw(errMsg);
    };
    AppComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'my-app',
            template: "\n        <p-growl [value]=\"msgs\"></p-growl>\n\n        <div class=\"ui-g layout\">\n            <div class=\"ui-g-12 ui-md-1\">The West...</div>\n            <div class=\"ui-g-12 ui-md-11 ui-g-nopad\">\n                <div class=\"ui-g-12 ui-g-nopad\">\n                    <p-menubar [model]=\"items\"></p-menubar>\n                </div>\n                <div class=\"ui-g-12\">\n                    <router-outlet></router-outlet>\n                </div>\n                <div class=\"ui-g-12\" style=\"text-align: center;\">\n                    <i class=\"fa fa-twitter\"></i> <a href=\"https://twitter.com/jaxiosoft\">@jaxiosoft</a> -\n                    <i class=\"fa fa-github-alt\"></i> <a href=\"https://github.com/jaxio/celerio-angular-quickstart\">https://github.com/jaxio/celerio-angular-quickstart</a>\n                </div>\n            </div>\n        </div>\n        <p-dialog header=\"Please login\" [visible]=\"displayLoginDialog\" [responsive]=\"true\" showEffect=\"fade\" [modal]=\"true\" [closable]=\"false\" *ngIf=\"!authenticated\">\n            <p>When using the sample database, use admin/admin</p>\n            <div ngForm class=\"ui-g\">\n                <div class=\"ui-g-12\" *ngIf=\"loginFailed\">\n                    <div class=\"ui-message ui-messages-error ui-corner-all\">\n                        Invalid login or password\n                    </div>\n                </div>\n                <div class=\"ui-g-12\">\n                    <div class=\"ui-g-4\">\n                        <label for=\"j_username\">Username</label>\n                    </div>\n                    <div class=\"ui-g-8\">\n                        <input pInputText id=\"j_username\" [(ngModel)]=\"j_username\" name=\"username\"/>\n                    </div>\n                </div>\n                <div class=\"ui-g-12\">\n                    <div class=\"ui-g-4\">\n                        <label for=\"j_password\">Password</label>\n                    </div>\n                    <div class=\"ui-g-8\">\n                        <input type=\"password\" pPassword id=\"j_password\" [(ngModel)]=\"j_password\" name=\"password\"/>\n                    </div>\n                </div>\n            </div>\n            <footer>\n                <div class=\"ui-dialog-buttonpane ui-widget-content ui-helper-clearfix\">\n                    <button pButton (click)=\"login()\" icon=\"fa-sign-in\" label=\"Login\"></button>\n                </div>\n            </footer>\n        </p-dialog>\n               ",
            styles: ["\n        .layout div {\n            background-color: white;\n            border: 1px solid #f5f7f8;\n        }\n    "]
        }), 
        __metadata('design:paramtypes', [http_1.Http, message_service_1.MessageService])
    ], AppComponent);
    return AppComponent;
}());
exports.AppComponent = AppComponent;
//# sourceMappingURL=app.component.js.map