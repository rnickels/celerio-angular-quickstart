/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/domain/CompositePk.java.cpk.vm
 */
package com.mycompany.myapp.domain;

import static org.apache.commons.lang.StringUtils.isNotEmpty;

import java.io.Serializable;
import java.time.LocalDateTime;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;

import com.google.common.base.Objects;

@Embeddable

public class UseCase3Pk implements Comparable<UseCase3Pk>, Serializable {
    private static final long serialVersionUID = 1L;

    private LocalDateTime id1;
    private String id2;

    public UseCase3Pk() {
    }

    public UseCase3Pk(LocalDateTime id1, String id2) {
        this.id1 = id1;
        this.id2 = id2;
    }

    /**
     * Helper to determine if this composite primary key is fully set.
     */
    @Transient
    public boolean areFieldsSet() {
        return isId1Set() && isId2Set();
    }

    /**
     * Helper method to determine if this instance is considered empty, that is,
     * if all the non primary key columns are null.
     */
    @Transient
    public boolean isEmpty() {
        return !isId1Set() && !isId2Set();
    }

    //-- [id1] ------------------------------

    @NotNull
    @Column(name = "ID1", nullable = false, length = 23)
    public LocalDateTime getId1() {
        return id1;
    }

    public void setId1(LocalDateTime id1) {
        this.id1 = id1;
    }

    public UseCase3Pk id1(LocalDateTime id1) {
        setId1(id1);
        return this;
    }

    /**
     * Helper that determines if this attribute is set or not.
     */
    @Transient
    public boolean isId1Set() {
        return getId1() != null;
    }

    //-- [id2] ------------------------------

    @Column(name = "ID2", nullable = false, length = 32)
    public String getId2() {
        return id2;
    }

    public void setId2(String id2) {
        this.id2 = id2;
    }

    public UseCase3Pk id2(String id2) {
        setId2(id2);
        return this;
    }

    /**
     * Helper that determines if this attribute is set or not.
     */
    @Transient
    public boolean isId2Set() {
        return getId2() != null && !getId2().isEmpty();
    }

    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof UseCase3Pk && hashCode() == other.hashCode());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getId1(), //
                getId2());
    }

    @Override
    public int compareTo(UseCase3Pk other) {
        return other == null ? -1 : hashCode() - other.hashCode();
    }

    /**
    * Return the string representation of the composite primary key, it should be reversable by version produced by the {@link #String()} method
    */
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        if (isId1Set()) {
            result.append(getId1());
        }
        result.append("_");
        if (isId2Set()) {
            result.append(getId2());
        }

        return result.toString();
    }

    /**
     * Build an instance from a string version produced by the {@link #toString()} method
     */
    public static UseCase3Pk fromString(String string) {
        UseCase3Pk result = new UseCase3Pk();
        String[] values = string.split("_");
        if (isNotEmpty(values[0])) {
            result.setId1(java.time.LocalDateTime.parse(values[0]));
        }
        if (isNotEmpty(values[1])) {
            result.setId2(values[1]);
        }

        return result;
    }
}
